// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ConfigTopic.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ConfigTopic.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

ConfigTopic::ConfigTopic()
{
    // m_subscriber_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@553f17c
    m_subscriber_id = 0;
    // m_vector_size com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4f7d0008
    m_vector_size = 0;
    // m_topictype_name com.eprosima.idl.parser.typecode.StringTypeCode@271053e1
    m_topictype_name ="";

}

ConfigTopic::~ConfigTopic()
{



}

ConfigTopic::ConfigTopic(
        const ConfigTopic& x)
{
    m_subscriber_id = x.m_subscriber_id;
    m_vector_size = x.m_vector_size;
    m_topictype_name = x.m_topictype_name;
}

ConfigTopic::ConfigTopic(
        ConfigTopic&& x)
{
    m_subscriber_id = x.m_subscriber_id;
    m_vector_size = x.m_vector_size;
    m_topictype_name = std::move(x.m_topictype_name);
}

ConfigTopic& ConfigTopic::operator =(
        const ConfigTopic& x)
{

    m_subscriber_id = x.m_subscriber_id;
    m_vector_size = x.m_vector_size;
    m_topictype_name = x.m_topictype_name;

    return *this;
}

ConfigTopic& ConfigTopic::operator =(
        ConfigTopic&& x)
{

    m_subscriber_id = x.m_subscriber_id;
    m_vector_size = x.m_vector_size;
    m_topictype_name = std::move(x.m_topictype_name);

    return *this;
}

bool ConfigTopic::operator ==(
        const ConfigTopic& x) const
{

    return (m_subscriber_id == x.m_subscriber_id && m_vector_size == x.m_vector_size && m_topictype_name == x.m_topictype_name);
}

bool ConfigTopic::operator !=(
        const ConfigTopic& x) const
{
    return !(*this == x);
}

size_t ConfigTopic::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t ConfigTopic::getCdrSerializedSize(
        const ConfigTopic& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.topictype_name().size() + 1;


    return current_alignment - initial_alignment;
}

void ConfigTopic::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_subscriber_id;
    scdr << m_vector_size;
    scdr << m_topictype_name;

}

void ConfigTopic::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_subscriber_id;
    dcdr >> m_vector_size;
    dcdr >> m_topictype_name;
}

/*!
 * @brief This function sets a value in member subscriber_id
 * @param _subscriber_id New value for member subscriber_id
 */
void ConfigTopic::subscriber_id(
        int16_t _subscriber_id)
{
    m_subscriber_id = _subscriber_id;
}

/*!
 * @brief This function returns the value of member subscriber_id
 * @return Value of member subscriber_id
 */
int16_t ConfigTopic::subscriber_id() const
{
    return m_subscriber_id;
}

/*!
 * @brief This function returns a reference to member subscriber_id
 * @return Reference to member subscriber_id
 */
int16_t& ConfigTopic::subscriber_id()
{
    return m_subscriber_id;
}

/*!
 * @brief This function sets a value in member vector_size
 * @param _vector_size New value for member vector_size
 */
void ConfigTopic::vector_size(
        uint16_t _vector_size)
{
    m_vector_size = _vector_size;
}

/*!
 * @brief This function returns the value of member vector_size
 * @return Value of member vector_size
 */
uint16_t ConfigTopic::vector_size() const
{
    return m_vector_size;
}

/*!
 * @brief This function returns a reference to member vector_size
 * @return Reference to member vector_size
 */
uint16_t& ConfigTopic::vector_size()
{
    return m_vector_size;
}

/*!
 * @brief This function copies the value in member topictype_name
 * @param _topictype_name New value to be copied in member topictype_name
 */
void ConfigTopic::topictype_name(
        const std::string& _topictype_name)
{
    m_topictype_name = _topictype_name;
}

/*!
 * @brief This function moves the value in member topictype_name
 * @param _topictype_name New value to be moved in member topictype_name
 */
void ConfigTopic::topictype_name(
        std::string&& _topictype_name)
{
    m_topictype_name = std::move(_topictype_name);
}

/*!
 * @brief This function returns a constant reference to member topictype_name
 * @return Constant reference to member topictype_name
 */
const std::string& ConfigTopic::topictype_name() const
{
    return m_topictype_name;
}

/*!
 * @brief This function returns a reference to member topictype_name
 * @return Reference to member topictype_name
 */
std::string& ConfigTopic::topictype_name()
{
    return m_topictype_name;
}

size_t ConfigTopic::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool ConfigTopic::isKeyDefined()
{
    return false;
}

void ConfigTopic::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}
