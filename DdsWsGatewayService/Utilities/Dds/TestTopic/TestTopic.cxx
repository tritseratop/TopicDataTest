// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TestTopic.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "TestTopic.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

ConfigTopic::ConfigTopic()
{
    // m_dispatch_time com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6500df86
    m_dispatch_time = 0;
    // m_str com.eprosima.idl.parser.typecode.StringTypeCode@59ec2012
    m_str ="";

}

ConfigTopic::~ConfigTopic()
{


}

ConfigTopic::ConfigTopic(
        const ConfigTopic& x)
{
    m_dispatch_time = x.m_dispatch_time;
    m_str = x.m_str;
}

ConfigTopic::ConfigTopic(
        ConfigTopic&& x)
{
    m_dispatch_time = x.m_dispatch_time;
    m_str = std::move(x.m_str);
}

ConfigTopic& ConfigTopic::operator =(
        const ConfigTopic& x)
{

    m_dispatch_time = x.m_dispatch_time;
    m_str = x.m_str;

    return *this;
}

ConfigTopic& ConfigTopic::operator =(
        ConfigTopic&& x)
{

    m_dispatch_time = x.m_dispatch_time;
    m_str = std::move(x.m_str);

    return *this;
}

bool ConfigTopic::operator ==(
        const ConfigTopic& x) const
{

    return (m_dispatch_time == x.m_dispatch_time && m_str == x.m_str);
}

bool ConfigTopic::operator !=(
        const ConfigTopic& x) const
{
    return !(*this == x);
}

size_t ConfigTopic::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t ConfigTopic::getCdrSerializedSize(
        const ConfigTopic& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.str().size() + 1;


    return current_alignment - initial_alignment;
}

void ConfigTopic::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_dispatch_time;
    scdr << m_str;

}

void ConfigTopic::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_dispatch_time;
    dcdr >> m_str;
}

/*!
 * @brief This function sets a value in member dispatch_time
 * @param _dispatch_time New value for member dispatch_time
 */
void ConfigTopic::dispatch_time(
        int64_t _dispatch_time)
{
    m_dispatch_time = _dispatch_time;
}

/*!
 * @brief This function returns the value of member dispatch_time
 * @return Value of member dispatch_time
 */
int64_t ConfigTopic::dispatch_time() const
{
    return m_dispatch_time;
}

/*!
 * @brief This function returns a reference to member dispatch_time
 * @return Reference to member dispatch_time
 */
int64_t& ConfigTopic::dispatch_time()
{
    return m_dispatch_time;
}

/*!
 * @brief This function copies the value in member str
 * @param _str New value to be copied in member str
 */
void ConfigTopic::str(
        const std::string& _str)
{
    m_str = _str;
}

/*!
 * @brief This function moves the value in member str
 * @param _str New value to be moved in member str
 */
void ConfigTopic::str(
        std::string&& _str)
{
    m_str = std::move(_str);
}

/*!
 * @brief This function returns a constant reference to member str
 * @return Constant reference to member str
 */
const std::string& ConfigTopic::str() const
{
    return m_str;
}

/*!
 * @brief This function returns a reference to member str
 * @return Reference to member str
 */
std::string& ConfigTopic::str()
{
    return m_str;
}

size_t ConfigTopic::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool ConfigTopic::isKeyDefined()
{
    return false;
}

void ConfigTopic::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}
