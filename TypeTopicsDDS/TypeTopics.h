// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TypeTopics.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _TYPETOPICS_H_
#define _TYPETOPICS_H_


#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(TypeTopics_SOURCE)
#define TypeTopics_DllAPI __declspec( dllexport )
#else
#define TypeTopics_DllAPI __declspec( dllimport )
#endif // TypeTopics_SOURCE
#else
#define TypeTopics_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define TypeTopics_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima

namespace scada_ate
{
    namespace typetopics
    {
        void SetMaxSizeDataCollectionInt(size_t size);
        void SetMaxSizeDataCollectionFloat(size_t size);
        void SetMaxSizeDataCollectionDouble(size_t size);
        void SetMaxSizeDataCollectionChar(size_t size);

        size_t GetMaxSizeDataCollectionInt();
        size_t GetMaxDataCollectionFloat();
        size_t GetMaxSizeDataCollectionDouble();
        size_t GetMaxSizeDataCollectionChar();

        void SetMaxSizeDDSDataExVectorInt(size_t size);
        void SetMaxSizeDDSDataExVectorFloat(size_t size);
        void SetMaxSizeDDSDataExVectorDouble(size_t size);
        void SetMaxSizeDDSDataExVectorChar(size_t size);

        size_t SetMaxSizeDDSDataExVectorInt();
        size_t SetMaxSizeDDSDataExVectorFloat();
        size_t SetMaxSizeDDSDataExVectorDouble();
        size_t SetMaxSizeDDSDataExVectorChar();

        void SetMaxSizeDDSAlarmAlarms(size_t size);
        void SetMaxSizeDDSExVectorAlarms(size_t size);

        size_t GetMaxSizeDDSAlarmAlarms();
        size_t GetMaxSizeDDSExVectorAlarms();
    }
}


/*!
 * @brief This class represents the structure TopicCommand defined by the user in the IDL file.
 * @ingroup TYPETOPICS
 */
class TopicCommand
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport TopicCommand();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~TopicCommand();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object TopicCommand that will be copied.
     */
    eProsima_user_DllExport TopicCommand(
            const TopicCommand& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object TopicCommand that will be copied.
     */
    eProsima_user_DllExport TopicCommand(
            TopicCommand&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object TopicCommand that will be copied.
     */
    eProsima_user_DllExport TopicCommand& operator =(
            const TopicCommand& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object TopicCommand that will be copied.
     */
    eProsima_user_DllExport TopicCommand& operator =(
            TopicCommand&& x);

    /*!
     * @brief This function sets a value in member time_messege
     * @param _time_messege New value for member time_messege
     */
    eProsima_user_DllExport void time_messege(
            int64_t _time_messege);

    /*!
     * @brief This function returns the value of member time_messege
     * @return Value of member time_messege
     */
    eProsima_user_DllExport int64_t time_messege() const;

    /*!
     * @brief This function returns a reference to member time_messege
     * @return Reference to member time_messege
     */
    eProsima_user_DllExport int64_t& time_messege();

    /*!
     * @brief This function sets a value in member id_source
     * @param _id_source New value for member id_source
     */
    eProsima_user_DllExport void id_source(
            uint32_t _id_source);

    /*!
     * @brief This function returns the value of member id_source
     * @return Value of member id_source
     */
    eProsima_user_DllExport uint32_t id_source() const;

    /*!
     * @brief This function returns a reference to member id_source
     * @return Reference to member id_source
     */
    eProsima_user_DllExport uint32_t& id_source();

    /*!
     * @brief This function sets a value in member id_target
     * @param _id_target New value for member id_target
     */
    eProsima_user_DllExport void id_target(
            uint32_t _id_target);

    /*!
     * @brief This function returns the value of member id_target
     * @return Value of member id_target
     */
    eProsima_user_DllExport uint32_t id_target() const;

    /*!
     * @brief This function returns a reference to member id_target
     * @return Reference to member id_target
     */
    eProsima_user_DllExport uint32_t& id_target();

    /*!
     * @brief This function sets a value in member code_command
     * @param _code_command New value for member code_command
     */
    eProsima_user_DllExport void code_command(
            uint32_t _code_command);

    /*!
     * @brief This function returns the value of member code_command
     * @return Value of member code_command
     */
    eProsima_user_DllExport uint32_t code_command() const;

    /*!
     * @brief This function returns a reference to member code_command
     * @return Reference to member code_command
     */
    eProsima_user_DllExport uint32_t& code_command();

    /*!
     * @brief This function copies the value in member parameter
     * @param _parameter New value to be copied in member parameter
     */
    eProsima_user_DllExport void parameter(
            const std::array<char, 256>& _parameter);

    /*!
     * @brief This function moves the value in member parameter
     * @param _parameter New value to be moved in member parameter
     */
    eProsima_user_DllExport void parameter(
            std::array<char, 256>&& _parameter);

    /*!
     * @brief This function returns a constant reference to member parameter
     * @return Constant reference to member parameter
     */
    eProsima_user_DllExport const std::array<char, 256>& parameter() const;

    /*!
     * @brief This function returns a reference to member parameter
     * @return Reference to member parameter
     */
    eProsima_user_DllExport std::array<char, 256>& parameter();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const TopicCommand& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int64_t m_time_messege;
    uint32_t m_id_source;
    uint32_t m_id_target;
    uint32_t m_code_command;
    std::array<char, 256> m_parameter;
};
/*!
 * @brief This class represents the structure TopicStatus defined by the user in the IDL file.
 * @ingroup TYPETOPICS
 */
class TopicStatus
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport TopicStatus();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~TopicStatus();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object TopicStatus that will be copied.
     */
    eProsima_user_DllExport TopicStatus(
            const TopicStatus& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object TopicStatus that will be copied.
     */
    eProsima_user_DllExport TopicStatus(
            TopicStatus&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object TopicStatus that will be copied.
     */
    eProsima_user_DllExport TopicStatus& operator =(
            const TopicStatus& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object TopicStatus that will be copied.
     */
    eProsima_user_DllExport TopicStatus& operator =(
            TopicStatus&& x);

    /*!
     * @brief This function sets a value in member time_messege
     * @param _time_messege New value for member time_messege
     */
    eProsima_user_DllExport void time_messege(
            int64_t _time_messege);

    /*!
     * @brief This function returns the value of member time_messege
     * @return Value of member time_messege
     */
    eProsima_user_DllExport int64_t time_messege() const;

    /*!
     * @brief This function returns a reference to member time_messege
     * @return Reference to member time_messege
     */
    eProsima_user_DllExport int64_t& time_messege();

    /*!
     * @brief This function sets a value in member id_source
     * @param _id_source New value for member id_source
     */
    eProsima_user_DllExport void id_source(
            uint32_t _id_source);

    /*!
     * @brief This function returns the value of member id_source
     * @return Value of member id_source
     */
    eProsima_user_DllExport uint32_t id_source() const;

    /*!
     * @brief This function returns a reference to member id_source
     * @return Reference to member id_source
     */
    eProsima_user_DllExport uint32_t& id_source();

    /*!
     * @brief This function sets a value in member id_target
     * @param _id_target New value for member id_target
     */
    eProsima_user_DllExport void id_target(
            uint32_t _id_target);

    /*!
     * @brief This function returns the value of member id_target
     * @return Value of member id_target
     */
    eProsima_user_DllExport uint32_t id_target() const;

    /*!
     * @brief This function returns a reference to member id_target
     * @return Reference to member id_target
     */
    eProsima_user_DllExport uint32_t& id_target();

    /*!
     * @brief This function sets a value in member code_command
     * @param _code_command New value for member code_command
     */
    eProsima_user_DllExport void code_command(
            uint32_t _code_command);

    /*!
     * @brief This function returns the value of member code_command
     * @return Value of member code_command
     */
    eProsima_user_DllExport uint32_t code_command() const;

    /*!
     * @brief This function returns a reference to member code_command
     * @return Reference to member code_command
     */
    eProsima_user_DllExport uint32_t& code_command();

    /*!
     * @brief This function sets a value in member code_status
     * @param _code_status New value for member code_status
     */
    eProsima_user_DllExport void code_status(
            uint32_t _code_status);

    /*!
     * @brief This function returns the value of member code_status
     * @return Value of member code_status
     */
    eProsima_user_DllExport uint32_t code_status() const;

    /*!
     * @brief This function returns a reference to member code_status
     * @return Reference to member code_status
     */
    eProsima_user_DllExport uint32_t& code_status();

    /*!
     * @brief This function copies the value in member description
     * @param _description New value to be copied in member description
     */
    eProsima_user_DllExport void description(
            const std::array<char, 256>& _description);

    /*!
     * @brief This function moves the value in member description
     * @param _description New value to be moved in member description
     */
    eProsima_user_DllExport void description(
            std::array<char, 256>&& _description);

    /*!
     * @brief This function returns a constant reference to member description
     * @return Constant reference to member description
     */
    eProsima_user_DllExport const std::array<char, 256>& description() const;

    /*!
     * @brief This function returns a reference to member description
     * @return Reference to member description
     */
    eProsima_user_DllExport std::array<char, 256>& description();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const TopicStatus& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int64_t m_time_messege;
    uint32_t m_id_source;
    uint32_t m_id_target;
    uint32_t m_code_command;
    uint32_t m_code_status;
    std::array<char, 256> m_description;
};
/*!
 * @brief This class represents the structure DataCollectionInt defined by the user in the IDL file.
 * @ingroup TYPETOPICS
 */
class DataCollectionInt
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DataCollectionInt();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DataCollectionInt();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DataCollectionInt that will be copied.
     */
    eProsima_user_DllExport DataCollectionInt(
            const DataCollectionInt& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DataCollectionInt that will be copied.
     */
    eProsima_user_DllExport DataCollectionInt(
            DataCollectionInt&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DataCollectionInt that will be copied.
     */
    eProsima_user_DllExport DataCollectionInt& operator =(
            const DataCollectionInt& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DataCollectionInt that will be copied.
     */
    eProsima_user_DllExport DataCollectionInt& operator =(
            DataCollectionInt&& x);

    /*!
     * @brief This function copies the value in member value
     * @param _value New value to be copied in member value
     */
    eProsima_user_DllExport void value(
            const std::vector<int32_t>& _value);

    /*!
     * @brief This function moves the value in member value
     * @param _value New value to be moved in member value
     */
    eProsima_user_DllExport void value(
            std::vector<int32_t>&& _value);

    /*!
     * @brief This function returns a constant reference to member value
     * @return Constant reference to member value
     */
    eProsima_user_DllExport const std::vector<int32_t>& value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport std::vector<int32_t>& value();
    /*!
     * @brief This function copies the value in member quality
     * @param _quality New value to be copied in member quality
     */
    eProsima_user_DllExport void quality(
            const std::vector<char>& _quality);

    /*!
     * @brief This function moves the value in member quality
     * @param _quality New value to be moved in member quality
     */
    eProsima_user_DllExport void quality(
            std::vector<char>&& _quality);

    /*!
     * @brief This function returns a constant reference to member quality
     * @return Constant reference to member quality
     */
    eProsima_user_DllExport const std::vector<char>& quality() const;

    /*!
     * @brief This function returns a reference to member quality
     * @return Reference to member quality
     */
    eProsima_user_DllExport std::vector<char>& quality();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const DataCollectionInt& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::vector<int32_t> m_value;
    std::vector<char> m_quality;
};
/*!
 * @brief This class represents the structure DataCollectionFloat defined by the user in the IDL file.
 * @ingroup TYPETOPICS
 */
class DataCollectionFloat
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DataCollectionFloat();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DataCollectionFloat();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DataCollectionFloat that will be copied.
     */
    eProsima_user_DllExport DataCollectionFloat(
            const DataCollectionFloat& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DataCollectionFloat that will be copied.
     */
    eProsima_user_DllExport DataCollectionFloat(
            DataCollectionFloat&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DataCollectionFloat that will be copied.
     */
    eProsima_user_DllExport DataCollectionFloat& operator =(
            const DataCollectionFloat& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DataCollectionFloat that will be copied.
     */
    eProsima_user_DllExport DataCollectionFloat& operator =(
            DataCollectionFloat&& x);

    /*!
     * @brief This function copies the value in member value
     * @param _value New value to be copied in member value
     */
    eProsima_user_DllExport void value(
            const std::vector<float>& _value);

    /*!
     * @brief This function moves the value in member value
     * @param _value New value to be moved in member value
     */
    eProsima_user_DllExport void value(
            std::vector<float>&& _value);

    /*!
     * @brief This function returns a constant reference to member value
     * @return Constant reference to member value
     */
    eProsima_user_DllExport const std::vector<float>& value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport std::vector<float>& value();
    /*!
     * @brief This function copies the value in member quality
     * @param _quality New value to be copied in member quality
     */
    eProsima_user_DllExport void quality(
            const std::vector<char>& _quality);

    /*!
     * @brief This function moves the value in member quality
     * @param _quality New value to be moved in member quality
     */
    eProsima_user_DllExport void quality(
            std::vector<char>&& _quality);

    /*!
     * @brief This function returns a constant reference to member quality
     * @return Constant reference to member quality
     */
    eProsima_user_DllExport const std::vector<char>& quality() const;

    /*!
     * @brief This function returns a reference to member quality
     * @return Reference to member quality
     */
    eProsima_user_DllExport std::vector<char>& quality();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const DataCollectionFloat& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::vector<float> m_value;
    std::vector<char> m_quality;
};
/*!
 * @brief This class represents the structure DataCollectionDouble defined by the user in the IDL file.
 * @ingroup TYPETOPICS
 */
class DataCollectionDouble
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DataCollectionDouble();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DataCollectionDouble();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DataCollectionDouble that will be copied.
     */
    eProsima_user_DllExport DataCollectionDouble(
            const DataCollectionDouble& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DataCollectionDouble that will be copied.
     */
    eProsima_user_DllExport DataCollectionDouble(
            DataCollectionDouble&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DataCollectionDouble that will be copied.
     */
    eProsima_user_DllExport DataCollectionDouble& operator =(
            const DataCollectionDouble& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DataCollectionDouble that will be copied.
     */
    eProsima_user_DllExport DataCollectionDouble& operator =(
            DataCollectionDouble&& x);

    /*!
     * @brief This function copies the value in member value
     * @param _value New value to be copied in member value
     */
    eProsima_user_DllExport void value(
            const std::vector<double>& _value);

    /*!
     * @brief This function moves the value in member value
     * @param _value New value to be moved in member value
     */
    eProsima_user_DllExport void value(
            std::vector<double>&& _value);

    /*!
     * @brief This function returns a constant reference to member value
     * @return Constant reference to member value
     */
    eProsima_user_DllExport const std::vector<double>& value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport std::vector<double>& value();
    /*!
     * @brief This function copies the value in member quality
     * @param _quality New value to be copied in member quality
     */
    eProsima_user_DllExport void quality(
            const std::vector<char>& _quality);

    /*!
     * @brief This function moves the value in member quality
     * @param _quality New value to be moved in member quality
     */
    eProsima_user_DllExport void quality(
            std::vector<char>&& _quality);

    /*!
     * @brief This function returns a constant reference to member quality
     * @return Constant reference to member quality
     */
    eProsima_user_DllExport const std::vector<char>& quality() const;

    /*!
     * @brief This function returns a reference to member quality
     * @return Reference to member quality
     */
    eProsima_user_DllExport std::vector<char>& quality();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const DataCollectionDouble& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::vector<double> m_value;
    std::vector<char> m_quality;
};
/*!
 * @brief This class represents the structure DataCollectionChar defined by the user in the IDL file.
 * @ingroup TYPETOPICS
 */
class DataCollectionChar
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DataCollectionChar();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DataCollectionChar();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DataCollectionChar that will be copied.
     */
    eProsima_user_DllExport DataCollectionChar(
            const DataCollectionChar& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DataCollectionChar that will be copied.
     */
    eProsima_user_DllExport DataCollectionChar(
            DataCollectionChar&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DataCollectionChar that will be copied.
     */
    eProsima_user_DllExport DataCollectionChar& operator =(
            const DataCollectionChar& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DataCollectionChar that will be copied.
     */
    eProsima_user_DllExport DataCollectionChar& operator =(
            DataCollectionChar&& x);

    /*!
     * @brief This function copies the value in member value
     * @param _value New value to be copied in member value
     */
    eProsima_user_DllExport void value(
            const std::vector<char>& _value);

    /*!
     * @brief This function moves the value in member value
     * @param _value New value to be moved in member value
     */
    eProsima_user_DllExport void value(
            std::vector<char>&& _value);

    /*!
     * @brief This function returns a constant reference to member value
     * @return Constant reference to member value
     */
    eProsima_user_DllExport const std::vector<char>& value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport std::vector<char>& value();
    /*!
     * @brief This function copies the value in member quality
     * @param _quality New value to be copied in member quality
     */
    eProsima_user_DllExport void quality(
            const std::vector<char>& _quality);

    /*!
     * @brief This function moves the value in member quality
     * @param _quality New value to be moved in member quality
     */
    eProsima_user_DllExport void quality(
            std::vector<char>&& _quality);

    /*!
     * @brief This function returns a constant reference to member quality
     * @return Constant reference to member quality
     */
    eProsima_user_DllExport const std::vector<char>& quality() const;

    /*!
     * @brief This function returns a reference to member quality
     * @return Reference to member quality
     */
    eProsima_user_DllExport std::vector<char>& quality();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const DataCollectionChar& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::vector<char> m_value;
    std::vector<char> m_quality;
};
/*!
 * @brief This class represents the structure DataExInt defined by the user in the IDL file.
 * @ingroup TYPETOPICS
 */
class DataExInt
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DataExInt();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DataExInt();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DataExInt that will be copied.
     */
    eProsima_user_DllExport DataExInt(
            const DataExInt& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DataExInt that will be copied.
     */
    eProsima_user_DllExport DataExInt(
            DataExInt&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DataExInt that will be copied.
     */
    eProsima_user_DllExport DataExInt& operator =(
            const DataExInt& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DataExInt that will be copied.
     */
    eProsima_user_DllExport DataExInt& operator =(
            DataExInt&& x);

    /*!
     * @brief This function sets a value in member time_source
     * @param _time_source New value for member time_source
     */
    eProsima_user_DllExport void time_source(
            int64_t _time_source);

    /*!
     * @brief This function returns the value of member time_source
     * @return Value of member time_source
     */
    eProsima_user_DllExport int64_t time_source() const;

    /*!
     * @brief This function returns a reference to member time_source
     * @return Reference to member time_source
     */
    eProsima_user_DllExport int64_t& time_source();

    /*!
     * @brief This function sets a value in member id_tag
     * @param _id_tag New value for member id_tag
     */
    eProsima_user_DllExport void id_tag(
            uint32_t _id_tag);

    /*!
     * @brief This function returns the value of member id_tag
     * @return Value of member id_tag
     */
    eProsima_user_DllExport uint32_t id_tag() const;

    /*!
     * @brief This function returns a reference to member id_tag
     * @return Reference to member id_tag
     */
    eProsima_user_DllExport uint32_t& id_tag();

    /*!
     * @brief This function sets a value in member value
     * @param _value New value for member value
     */
    eProsima_user_DllExport void value(
            int32_t _value);

    /*!
     * @brief This function returns the value of member value
     * @return Value of member value
     */
    eProsima_user_DllExport int32_t value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport int32_t& value();

    /*!
     * @brief This function sets a value in member quality
     * @param _quality New value for member quality
     */
    eProsima_user_DllExport void quality(
            char _quality);

    /*!
     * @brief This function returns the value of member quality
     * @return Value of member quality
     */
    eProsima_user_DllExport char quality() const;

    /*!
     * @brief This function returns a reference to member quality
     * @return Reference to member quality
     */
    eProsima_user_DllExport char& quality();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const DataExInt& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int64_t m_time_source;
    uint32_t m_id_tag;
    int32_t m_value;
    char m_quality;
};
/*!
 * @brief This class represents the structure DataExFloat defined by the user in the IDL file.
 * @ingroup TYPETOPICS
 */
class DataExFloat
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DataExFloat();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DataExFloat();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DataExFloat that will be copied.
     */
    eProsima_user_DllExport DataExFloat(
            const DataExFloat& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DataExFloat that will be copied.
     */
    eProsima_user_DllExport DataExFloat(
            DataExFloat&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DataExFloat that will be copied.
     */
    eProsima_user_DllExport DataExFloat& operator =(
            const DataExFloat& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DataExFloat that will be copied.
     */
    eProsima_user_DllExport DataExFloat& operator =(
            DataExFloat&& x);

    /*!
     * @brief This function sets a value in member time_source
     * @param _time_source New value for member time_source
     */
    eProsima_user_DllExport void time_source(
            int64_t _time_source);

    /*!
     * @brief This function returns the value of member time_source
     * @return Value of member time_source
     */
    eProsima_user_DllExport int64_t time_source() const;

    /*!
     * @brief This function returns a reference to member time_source
     * @return Reference to member time_source
     */
    eProsima_user_DllExport int64_t& time_source();

    /*!
     * @brief This function sets a value in member id_tag
     * @param _id_tag New value for member id_tag
     */
    eProsima_user_DllExport void id_tag(
            uint32_t _id_tag);

    /*!
     * @brief This function returns the value of member id_tag
     * @return Value of member id_tag
     */
    eProsima_user_DllExport uint32_t id_tag() const;

    /*!
     * @brief This function returns a reference to member id_tag
     * @return Reference to member id_tag
     */
    eProsima_user_DllExport uint32_t& id_tag();

    /*!
     * @brief This function sets a value in member value
     * @param _value New value for member value
     */
    eProsima_user_DllExport void value(
            float _value);

    /*!
     * @brief This function returns the value of member value
     * @return Value of member value
     */
    eProsima_user_DllExport float value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport float& value();

    /*!
     * @brief This function sets a value in member quality
     * @param _quality New value for member quality
     */
    eProsima_user_DllExport void quality(
            char _quality);

    /*!
     * @brief This function returns the value of member quality
     * @return Value of member quality
     */
    eProsima_user_DllExport char quality() const;

    /*!
     * @brief This function returns a reference to member quality
     * @return Reference to member quality
     */
    eProsima_user_DllExport char& quality();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const DataExFloat& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int64_t m_time_source;
    uint32_t m_id_tag;
    float m_value;
    char m_quality;
};
/*!
 * @brief This class represents the structure DataExDouble defined by the user in the IDL file.
 * @ingroup TYPETOPICS
 */
class DataExDouble
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DataExDouble();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DataExDouble();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DataExDouble that will be copied.
     */
    eProsima_user_DllExport DataExDouble(
            const DataExDouble& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DataExDouble that will be copied.
     */
    eProsima_user_DllExport DataExDouble(
            DataExDouble&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DataExDouble that will be copied.
     */
    eProsima_user_DllExport DataExDouble& operator =(
            const DataExDouble& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DataExDouble that will be copied.
     */
    eProsima_user_DllExport DataExDouble& operator =(
            DataExDouble&& x);

    /*!
     * @brief This function sets a value in member time_source
     * @param _time_source New value for member time_source
     */
    eProsima_user_DllExport void time_source(
            int64_t _time_source);

    /*!
     * @brief This function returns the value of member time_source
     * @return Value of member time_source
     */
    eProsima_user_DllExport int64_t time_source() const;

    /*!
     * @brief This function returns a reference to member time_source
     * @return Reference to member time_source
     */
    eProsima_user_DllExport int64_t& time_source();

    /*!
     * @brief This function sets a value in member id_tag
     * @param _id_tag New value for member id_tag
     */
    eProsima_user_DllExport void id_tag(
            uint32_t _id_tag);

    /*!
     * @brief This function returns the value of member id_tag
     * @return Value of member id_tag
     */
    eProsima_user_DllExport uint32_t id_tag() const;

    /*!
     * @brief This function returns a reference to member id_tag
     * @return Reference to member id_tag
     */
    eProsima_user_DllExport uint32_t& id_tag();

    /*!
     * @brief This function sets a value in member value
     * @param _value New value for member value
     */
    eProsima_user_DllExport void value(
            double _value);

    /*!
     * @brief This function returns the value of member value
     * @return Value of member value
     */
    eProsima_user_DllExport double value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport double& value();

    /*!
     * @brief This function sets a value in member quality
     * @param _quality New value for member quality
     */
    eProsima_user_DllExport void quality(
            char _quality);

    /*!
     * @brief This function returns the value of member quality
     * @return Value of member quality
     */
    eProsima_user_DllExport char quality() const;

    /*!
     * @brief This function returns a reference to member quality
     * @return Reference to member quality
     */
    eProsima_user_DllExport char& quality();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const DataExDouble& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int64_t m_time_source;
    uint32_t m_id_tag;
    double m_value;
    char m_quality;
};
/*!
 * @brief This class represents the structure DataExChar defined by the user in the IDL file.
 * @ingroup TYPETOPICS
 */
class DataExChar
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DataExChar();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DataExChar();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DataExChar that will be copied.
     */
    eProsima_user_DllExport DataExChar(
            const DataExChar& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DataExChar that will be copied.
     */
    eProsima_user_DllExport DataExChar(
            DataExChar&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DataExChar that will be copied.
     */
    eProsima_user_DllExport DataExChar& operator =(
            const DataExChar& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DataExChar that will be copied.
     */
    eProsima_user_DllExport DataExChar& operator =(
            DataExChar&& x);

    /*!
     * @brief This function sets a value in member time_source
     * @param _time_source New value for member time_source
     */
    eProsima_user_DllExport void time_source(
            int64_t _time_source);

    /*!
     * @brief This function returns the value of member time_source
     * @return Value of member time_source
     */
    eProsima_user_DllExport int64_t time_source() const;

    /*!
     * @brief This function returns a reference to member time_source
     * @return Reference to member time_source
     */
    eProsima_user_DllExport int64_t& time_source();

    /*!
     * @brief This function sets a value in member id_tag
     * @param _id_tag New value for member id_tag
     */
    eProsima_user_DllExport void id_tag(
            uint32_t _id_tag);

    /*!
     * @brief This function returns the value of member id_tag
     * @return Value of member id_tag
     */
    eProsima_user_DllExport uint32_t id_tag() const;

    /*!
     * @brief This function returns a reference to member id_tag
     * @return Reference to member id_tag
     */
    eProsima_user_DllExport uint32_t& id_tag();

    /*!
     * @brief This function sets a value in member value
     * @param _value New value for member value
     */
    eProsima_user_DllExport void value(
            char _value);

    /*!
     * @brief This function returns the value of member value
     * @return Value of member value
     */
    eProsima_user_DllExport char value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport char& value();

    /*!
     * @brief This function sets a value in member quality
     * @param _quality New value for member quality
     */
    eProsima_user_DllExport void quality(
            char _quality);

    /*!
     * @brief This function returns the value of member quality
     * @return Value of member quality
     */
    eProsima_user_DllExport char quality() const;

    /*!
     * @brief This function returns a reference to member quality
     * @return Reference to member quality
     */
    eProsima_user_DllExport char& quality();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const DataExChar& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int64_t m_time_source;
    uint32_t m_id_tag;
    char m_value;
    char m_quality;
};
/*!
 * @brief This class represents the structure DDSData defined by the user in the IDL file.
 * @ingroup TYPETOPICS
 */
class DDSData
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DDSData();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DDSData();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DDSData that will be copied.
     */
    eProsima_user_DllExport DDSData(
            const DDSData& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DDSData that will be copied.
     */
    eProsima_user_DllExport DDSData(
            DDSData&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DDSData that will be copied.
     */
    eProsima_user_DllExport DDSData& operator =(
            const DDSData& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DDSData that will be copied.
     */
    eProsima_user_DllExport DDSData& operator =(
            DDSData&& x);

    /*!
     * @brief This function sets a value in member time_source
     * @param _time_source New value for member time_source
     */
    eProsima_user_DllExport void time_source(
            int64_t _time_source);

    /*!
     * @brief This function returns the value of member time_source
     * @return Value of member time_source
     */
    eProsima_user_DllExport int64_t time_source() const;

    /*!
     * @brief This function returns a reference to member time_source
     * @return Reference to member time_source
     */
    eProsima_user_DllExport int64_t& time_source();

    /*!
     * @brief This function sets a value in member time_service
     * @param _time_service New value for member time_service
     */
    eProsima_user_DllExport void time_service(
            int64_t _time_service);

    /*!
     * @brief This function returns the value of member time_service
     * @return Value of member time_service
     */
    eProsima_user_DllExport int64_t time_service() const;

    /*!
     * @brief This function returns a reference to member time_service
     * @return Reference to member time_service
     */
    eProsima_user_DllExport int64_t& time_service();

    /*!
     * @brief This function copies the value in member data_int
     * @param _data_int New value to be copied in member data_int
     */
    eProsima_user_DllExport void data_int(
            const DataCollectionInt& _data_int);

    /*!
     * @brief This function moves the value in member data_int
     * @param _data_int New value to be moved in member data_int
     */
    eProsima_user_DllExport void data_int(
            DataCollectionInt&& _data_int);

    /*!
     * @brief This function returns a constant reference to member data_int
     * @return Constant reference to member data_int
     */
    eProsima_user_DllExport const DataCollectionInt& data_int() const;

    /*!
     * @brief This function returns a reference to member data_int
     * @return Reference to member data_int
     */
    eProsima_user_DllExport DataCollectionInt& data_int();
    /*!
     * @brief This function copies the value in member data_float
     * @param _data_float New value to be copied in member data_float
     */
    eProsima_user_DllExport void data_float(
            const DataCollectionFloat& _data_float);

    /*!
     * @brief This function moves the value in member data_float
     * @param _data_float New value to be moved in member data_float
     */
    eProsima_user_DllExport void data_float(
            DataCollectionFloat&& _data_float);

    /*!
     * @brief This function returns a constant reference to member data_float
     * @return Constant reference to member data_float
     */
    eProsima_user_DllExport const DataCollectionFloat& data_float() const;

    /*!
     * @brief This function returns a reference to member data_float
     * @return Reference to member data_float
     */
    eProsima_user_DllExport DataCollectionFloat& data_float();
    /*!
     * @brief This function copies the value in member data_double
     * @param _data_double New value to be copied in member data_double
     */
    eProsima_user_DllExport void data_double(
            const DataCollectionDouble& _data_double);

    /*!
     * @brief This function moves the value in member data_double
     * @param _data_double New value to be moved in member data_double
     */
    eProsima_user_DllExport void data_double(
            DataCollectionDouble&& _data_double);

    /*!
     * @brief This function returns a constant reference to member data_double
     * @return Constant reference to member data_double
     */
    eProsima_user_DllExport const DataCollectionDouble& data_double() const;

    /*!
     * @brief This function returns a reference to member data_double
     * @return Reference to member data_double
     */
    eProsima_user_DllExport DataCollectionDouble& data_double();
    /*!
     * @brief This function copies the value in member data_char
     * @param _data_char New value to be copied in member data_char
     */
    eProsima_user_DllExport void data_char(
            const DataCollectionChar& _data_char);

    /*!
     * @brief This function moves the value in member data_char
     * @param _data_char New value to be moved in member data_char
     */
    eProsima_user_DllExport void data_char(
            DataCollectionChar&& _data_char);

    /*!
     * @brief This function returns a constant reference to member data_char
     * @return Constant reference to member data_char
     */
    eProsima_user_DllExport const DataCollectionChar& data_char() const;

    /*!
     * @brief This function returns a reference to member data_char
     * @return Reference to member data_char
     */
    eProsima_user_DllExport DataCollectionChar& data_char();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const DDSData& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int64_t m_time_source;
    int64_t m_time_service;
    DataCollectionInt m_data_int;
    DataCollectionFloat m_data_float;
    DataCollectionDouble m_data_double;
    DataCollectionChar m_data_char;
};
/*!
 * @brief This class represents the structure DDSDataEx defined by the user in the IDL file.
 * @ingroup TYPETOPICS
 */
class DDSDataEx
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DDSDataEx();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DDSDataEx();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DDSDataEx that will be copied.
     */
    eProsima_user_DllExport DDSDataEx(
            const DDSDataEx& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DDSDataEx that will be copied.
     */
    eProsima_user_DllExport DDSDataEx(
            DDSDataEx&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DDSDataEx that will be copied.
     */
    eProsima_user_DllExport DDSDataEx& operator =(
            const DDSDataEx& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DDSDataEx that will be copied.
     */
    eProsima_user_DllExport DDSDataEx& operator =(
            DDSDataEx&& x);

    /*!
     * @brief This function sets a value in member time_service
     * @param _time_service New value for member time_service
     */
    eProsima_user_DllExport void time_service(
            int64_t _time_service);

    /*!
     * @brief This function returns the value of member time_service
     * @return Value of member time_service
     */
    eProsima_user_DllExport int64_t time_service() const;

    /*!
     * @brief This function returns a reference to member time_service
     * @return Reference to member time_service
     */
    eProsima_user_DllExport int64_t& time_service();

    /*!
     * @brief This function copies the value in member data_int
     * @param _data_int New value to be copied in member data_int
     */
    eProsima_user_DllExport void data_int(
            const std::vector<DataExInt>& _data_int);

    /*!
     * @brief This function moves the value in member data_int
     * @param _data_int New value to be moved in member data_int
     */
    eProsima_user_DllExport void data_int(
            std::vector<DataExInt>&& _data_int);

    /*!
     * @brief This function returns a constant reference to member data_int
     * @return Constant reference to member data_int
     */
    eProsima_user_DllExport const std::vector<DataExInt>& data_int() const;

    /*!
     * @brief This function returns a reference to member data_int
     * @return Reference to member data_int
     */
    eProsima_user_DllExport std::vector<DataExInt>& data_int();
    /*!
     * @brief This function copies the value in member data_float
     * @param _data_float New value to be copied in member data_float
     */
    eProsima_user_DllExport void data_float(
            const std::vector<DataExFloat>& _data_float);

    /*!
     * @brief This function moves the value in member data_float
     * @param _data_float New value to be moved in member data_float
     */
    eProsima_user_DllExport void data_float(
            std::vector<DataExFloat>&& _data_float);

    /*!
     * @brief This function returns a constant reference to member data_float
     * @return Constant reference to member data_float
     */
    eProsima_user_DllExport const std::vector<DataExFloat>& data_float() const;

    /*!
     * @brief This function returns a reference to member data_float
     * @return Reference to member data_float
     */
    eProsima_user_DllExport std::vector<DataExFloat>& data_float();
    /*!
     * @brief This function copies the value in member data_double
     * @param _data_double New value to be copied in member data_double
     */
    eProsima_user_DllExport void data_double(
            const std::vector<DataExDouble>& _data_double);

    /*!
     * @brief This function moves the value in member data_double
     * @param _data_double New value to be moved in member data_double
     */
    eProsima_user_DllExport void data_double(
            std::vector<DataExDouble>&& _data_double);

    /*!
     * @brief This function returns a constant reference to member data_double
     * @return Constant reference to member data_double
     */
    eProsima_user_DllExport const std::vector<DataExDouble>& data_double() const;

    /*!
     * @brief This function returns a reference to member data_double
     * @return Reference to member data_double
     */
    eProsima_user_DllExport std::vector<DataExDouble>& data_double();
    /*!
     * @brief This function copies the value in member data_char
     * @param _data_char New value to be copied in member data_char
     */
    eProsima_user_DllExport void data_char(
            const std::vector<DataExChar>& _data_char);

    /*!
     * @brief This function moves the value in member data_char
     * @param _data_char New value to be moved in member data_char
     */
    eProsima_user_DllExport void data_char(
            std::vector<DataExChar>&& _data_char);

    /*!
     * @brief This function returns a constant reference to member data_char
     * @return Constant reference to member data_char
     */
    eProsima_user_DllExport const std::vector<DataExChar>& data_char() const;

    /*!
     * @brief This function returns a reference to member data_char
     * @return Reference to member data_char
     */
    eProsima_user_DllExport std::vector<DataExChar>& data_char();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const DDSDataEx& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int64_t m_time_service;
    std::vector<DataExInt> m_data_int;
    std::vector<DataExFloat> m_data_float;
    std::vector<DataExDouble> m_data_double;
    std::vector<DataExChar> m_data_char;
};
/*!
 * @brief This class represents the structure Alarm defined by the user in the IDL file.
 * @ingroup TYPETOPICS
 */
class Alarm
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Alarm();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Alarm();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Alarm that will be copied.
     */
    eProsima_user_DllExport Alarm(
            const Alarm& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Alarm that will be copied.
     */
    eProsima_user_DllExport Alarm(
            Alarm&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Alarm that will be copied.
     */
    eProsima_user_DllExport Alarm& operator =(
            const Alarm& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Alarm that will be copied.
     */
    eProsima_user_DllExport Alarm& operator =(
            Alarm&& x);

    /*!
     * @brief This function sets a value in member time_source
     * @param _time_source New value for member time_source
     */
    eProsima_user_DllExport void time_source(
            int64_t _time_source);

    /*!
     * @brief This function returns the value of member time_source
     * @return Value of member time_source
     */
    eProsima_user_DllExport int64_t time_source() const;

    /*!
     * @brief This function returns a reference to member time_source
     * @return Reference to member time_source
     */
    eProsima_user_DllExport int64_t& time_source();

    /*!
     * @brief This function sets a value in member value
     * @param _value New value for member value
     */
    eProsima_user_DllExport void value(
            char _value);

    /*!
     * @brief This function returns the value of member value
     * @return Value of member value
     */
    eProsima_user_DllExport char value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport char& value();

    /*!
     * @brief This function sets a value in member quality
     * @param _quality New value for member quality
     */
    eProsima_user_DllExport void quality(
            char _quality);

    /*!
     * @brief This function returns the value of member quality
     * @return Value of member quality
     */
    eProsima_user_DllExport char quality() const;

    /*!
     * @brief This function returns a reference to member quality
     * @return Reference to member quality
     */
    eProsima_user_DllExport char& quality();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Alarm& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int64_t m_time_source;
    char m_value;
    char m_quality;
};
/*!
 * @brief This class represents the structure DDSAlarm defined by the user in the IDL file.
 * @ingroup TYPETOPICS
 */
class DDSAlarm
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DDSAlarm();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DDSAlarm();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DDSAlarm that will be copied.
     */
    eProsima_user_DllExport DDSAlarm(
            const DDSAlarm& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DDSAlarm that will be copied.
     */
    eProsima_user_DllExport DDSAlarm(
            DDSAlarm&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DDSAlarm that will be copied.
     */
    eProsima_user_DllExport DDSAlarm& operator =(
            const DDSAlarm& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DDSAlarm that will be copied.
     */
    eProsima_user_DllExport DDSAlarm& operator =(
            DDSAlarm&& x);

    /*!
     * @brief This function sets a value in member time_source
     * @param _time_source New value for member time_source
     */
    eProsima_user_DllExport void time_source(
            int64_t _time_source);

    /*!
     * @brief This function returns the value of member time_source
     * @return Value of member time_source
     */
    eProsima_user_DllExport int64_t time_source() const;

    /*!
     * @brief This function returns a reference to member time_source
     * @return Reference to member time_source
     */
    eProsima_user_DllExport int64_t& time_source();

    /*!
     * @brief This function sets a value in member time_service
     * @param _time_service New value for member time_service
     */
    eProsima_user_DllExport void time_service(
            int64_t _time_service);

    /*!
     * @brief This function returns the value of member time_service
     * @return Value of member time_service
     */
    eProsima_user_DllExport int64_t time_service() const;

    /*!
     * @brief This function returns a reference to member time_service
     * @return Reference to member time_service
     */
    eProsima_user_DllExport int64_t& time_service();

    /*!
     * @brief This function copies the value in member alarms
     * @param _alarms New value to be copied in member alarms
     */
    eProsima_user_DllExport void alarms(
            const std::vector<uint32_t>& _alarms);

    /*!
     * @brief This function moves the value in member alarms
     * @param _alarms New value to be moved in member alarms
     */
    eProsima_user_DllExport void alarms(
            std::vector<uint32_t>&& _alarms);

    /*!
     * @brief This function returns a constant reference to member alarms
     * @return Constant reference to member alarms
     */
    eProsima_user_DllExport const std::vector<uint32_t>& alarms() const;

    /*!
     * @brief This function returns a reference to member alarms
     * @return Reference to member alarms
     */
    eProsima_user_DllExport std::vector<uint32_t>& alarms();
    /*!
     * @brief This function copies the value in member quality
     * @param _quality New value to be copied in member quality
     */
    eProsima_user_DllExport void quality(
            const std::vector<uint32_t>& _quality);

    /*!
     * @brief This function moves the value in member quality
     * @param _quality New value to be moved in member quality
     */
    eProsima_user_DllExport void quality(
            std::vector<uint32_t>&& _quality);

    /*!
     * @brief This function returns a constant reference to member quality
     * @return Constant reference to member quality
     */
    eProsima_user_DllExport const std::vector<uint32_t>& quality() const;

    /*!
     * @brief This function returns a reference to member quality
     * @return Reference to member quality
     */
    eProsima_user_DllExport std::vector<uint32_t>& quality();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const DDSAlarm& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int64_t m_time_source;
    int64_t m_time_service;
    std::vector<uint32_t> m_alarms;
    std::vector<uint32_t> m_quality;
};
/*!
 * @brief This class represents the structure DDSExAlarm defined by the user in the IDL file.
 * @ingroup TYPETOPICS
 */
class DDSExAlarm
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DDSExAlarm();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DDSExAlarm();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DDSExAlarm that will be copied.
     */
    eProsima_user_DllExport DDSExAlarm(
            const DDSExAlarm& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DDSExAlarm that will be copied.
     */
    eProsima_user_DllExport DDSExAlarm(
            DDSExAlarm&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DDSExAlarm that will be copied.
     */
    eProsima_user_DllExport DDSExAlarm& operator =(
            const DDSExAlarm& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DDSExAlarm that will be copied.
     */
    eProsima_user_DllExport DDSExAlarm& operator =(
            DDSExAlarm&& x);

    /*!
     * @brief This function sets a value in member time_service
     * @param _time_service New value for member time_service
     */
    eProsima_user_DllExport void time_service(
            int64_t _time_service);

    /*!
     * @brief This function returns the value of member time_service
     * @return Value of member time_service
     */
    eProsima_user_DllExport int64_t time_service() const;

    /*!
     * @brief This function returns a reference to member time_service
     * @return Reference to member time_service
     */
    eProsima_user_DllExport int64_t& time_service();

    /*!
     * @brief This function copies the value in member alarms
     * @param _alarms New value to be copied in member alarms
     */
    eProsima_user_DllExport void alarms(
            const std::vector<Alarm>& _alarms);

    /*!
     * @brief This function moves the value in member alarms
     * @param _alarms New value to be moved in member alarms
     */
    eProsima_user_DllExport void alarms(
            std::vector<Alarm>&& _alarms);

    /*!
     * @brief This function returns a constant reference to member alarms
     * @return Constant reference to member alarms
     */
    eProsima_user_DllExport const std::vector<Alarm>& alarms() const;

    /*!
     * @brief This function returns a reference to member alarms
     * @return Reference to member alarms
     */
    eProsima_user_DllExport std::vector<Alarm>& alarms();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const DDSExAlarm& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int64_t m_time_service;
    std::vector<Alarm> m_alarms;
};

#endif // _TYPETOPICS_H_