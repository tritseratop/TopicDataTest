// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DDSDataTypeObject.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "DDSData.h"
#include "DDSDataTypeObject.h"
#include <utility>
#include <sstream>
#include <fastrtps/rtps/common/SerializedPayload.h>
#include <fastrtps/utils/md5.h>
#include <fastrtps/types/TypeObjectFactory.h>
#include <fastrtps/types/TypeNamesGenerator.h>
#include <fastrtps/types/AnnotationParameterValue.h>
#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

using namespace eprosima::fastrtps::rtps;

void registerDDSDataTypes()
{
    TypeObjectFactory *factory = TypeObjectFactory::get_instance();
    factory->add_type_object("DataCollectionInt", GetDataCollectionIntIdentifier(true), GetDataCollectionIntObject(true));
    factory->add_type_object("DataCollectionInt", GetDataCollectionIntIdentifier(false), GetDataCollectionIntObject(false));

    factory->add_type_object("DataCollectionFloat", GetDataCollectionFloatIdentifier(true), GetDataCollectionFloatObject(true));
    factory->add_type_object("DataCollectionFloat", GetDataCollectionFloatIdentifier(false), GetDataCollectionFloatObject(false));

    factory->add_type_object("DataCollectionDouble", GetDataCollectionDoubleIdentifier(true), GetDataCollectionDoubleObject(true));
    factory->add_type_object("DataCollectionDouble", GetDataCollectionDoubleIdentifier(false), GetDataCollectionDoubleObject(false));

    factory->add_type_object("DataChar", GetDataCharIdentifier(true), GetDataCharObject(true));
    factory->add_type_object("DataChar", GetDataCharIdentifier(false), GetDataCharObject(false));

    factory->add_type_object("DataCollectionChar", GetDataCollectionCharIdentifier(true), GetDataCollectionCharObject(true));
    factory->add_type_object("DataCollectionChar", GetDataCollectionCharIdentifier(false), GetDataCollectionCharObject(false));

    factory->add_type_object("DDSData", GetDDSDataIdentifier(true), GetDDSDataObject(true));
    factory->add_type_object("DDSData", GetDDSDataIdentifier(false), GetDDSDataObject(false));

}

const TypeIdentifier* GetDataCollectionIntIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("DataCollectionInt", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetDataCollectionIntObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("DataCollectionInt", complete);
}

const TypeObject* GetDataCollectionIntObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("DataCollectionInt", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteDataCollectionIntObject();
    }
    //else
    return GetMinimalDataCollectionIntObject();
}

const TypeObject* GetMinimalDataCollectionIntObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("DataCollectionInt", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_value;
    mst_value.common().member_id(memberId++);
    mst_value.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_value.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_value.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_value.common().member_flags().IS_OPTIONAL(false);
    mst_value.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_value.common().member_flags().IS_KEY(false);
    mst_value.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_value.common().member_type_id(*TypeObjectFactory::get_instance()->get_sequence_identifier("int32_t", 0, false));


    MD5 value_hash("value");
    for(int i = 0; i < 4; ++i)
    {
        mst_value.detail().name_hash()[i] = value_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_value);

    MinimalStructMember mst_quality;
    mst_quality.common().member_id(memberId++);
    mst_quality.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_quality.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_quality.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_quality.common().member_flags().IS_OPTIONAL(false);
    mst_quality.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_quality.common().member_flags().IS_KEY(false);
    mst_quality.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_quality.common().member_type_id(*TypeObjectFactory::get_instance()->get_sequence_identifier("char", 0, false));


    MD5 quality_hash("quality");
    for(int i = 0; i < 4; ++i)
    {
        mst_quality.detail().name_hash()[i] = quality_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_quality);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("DataCollectionInt", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("DataCollectionInt", false);
}

const TypeObject* GetCompleteDataCollectionIntObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("DataCollectionInt", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_value;
    cst_value.common().member_id(memberId++);
    cst_value.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_value.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_value.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_value.common().member_flags().IS_OPTIONAL(false);
    cst_value.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_value.common().member_flags().IS_KEY(false);
    cst_value.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_value.common().member_type_id(*TypeObjectFactory::get_instance()->get_sequence_identifier("int32_t", 0, true));


    cst_value.detail().name("value");

    type_object->complete().struct_type().member_seq().emplace_back(cst_value);

    CompleteStructMember cst_quality;
    cst_quality.common().member_id(memberId++);
    cst_quality.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_quality.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_quality.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_quality.common().member_flags().IS_OPTIONAL(false);
    cst_quality.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_quality.common().member_flags().IS_KEY(false);
    cst_quality.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_quality.common().member_type_id(*TypeObjectFactory::get_instance()->get_sequence_identifier("char", 0, true));


    cst_quality.detail().name("quality");

    type_object->complete().struct_type().member_seq().emplace_back(cst_quality);


    // Header
    type_object->complete().struct_type().header().detail().type_name("DataCollectionInt");
    // TODO inheritance


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("DataCollectionInt", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("DataCollectionInt", true);
}

const TypeIdentifier* GetDataCollectionFloatIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("DataCollectionFloat", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetDataCollectionFloatObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("DataCollectionFloat", complete);
}

const TypeObject* GetDataCollectionFloatObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("DataCollectionFloat", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteDataCollectionFloatObject();
    }
    //else
    return GetMinimalDataCollectionFloatObject();
}

const TypeObject* GetMinimalDataCollectionFloatObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("DataCollectionFloat", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_value;
    mst_value.common().member_id(memberId++);
    mst_value.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_value.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_value.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_value.common().member_flags().IS_OPTIONAL(false);
    mst_value.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_value.common().member_flags().IS_KEY(false);
    mst_value.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_value.common().member_type_id(*TypeObjectFactory::get_instance()->get_sequence_identifier("float", 0, false));


    MD5 value_hash("value");
    for(int i = 0; i < 4; ++i)
    {
        mst_value.detail().name_hash()[i] = value_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_value);

    MinimalStructMember mst_quality;
    mst_quality.common().member_id(memberId++);
    mst_quality.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_quality.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_quality.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_quality.common().member_flags().IS_OPTIONAL(false);
    mst_quality.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_quality.common().member_flags().IS_KEY(false);
    mst_quality.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_quality.common().member_type_id(*TypeObjectFactory::get_instance()->get_sequence_identifier("char", 0, false));


    MD5 quality_hash("quality");
    for(int i = 0; i < 4; ++i)
    {
        mst_quality.detail().name_hash()[i] = quality_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_quality);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("DataCollectionFloat", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("DataCollectionFloat", false);
}

const TypeObject* GetCompleteDataCollectionFloatObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("DataCollectionFloat", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_value;
    cst_value.common().member_id(memberId++);
    cst_value.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_value.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_value.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_value.common().member_flags().IS_OPTIONAL(false);
    cst_value.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_value.common().member_flags().IS_KEY(false);
    cst_value.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_value.common().member_type_id(*TypeObjectFactory::get_instance()->get_sequence_identifier("float", 0, true));


    cst_value.detail().name("value");

    type_object->complete().struct_type().member_seq().emplace_back(cst_value);

    CompleteStructMember cst_quality;
    cst_quality.common().member_id(memberId++);
    cst_quality.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_quality.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_quality.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_quality.common().member_flags().IS_OPTIONAL(false);
    cst_quality.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_quality.common().member_flags().IS_KEY(false);
    cst_quality.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_quality.common().member_type_id(*TypeObjectFactory::get_instance()->get_sequence_identifier("char", 0, true));


    cst_quality.detail().name("quality");

    type_object->complete().struct_type().member_seq().emplace_back(cst_quality);


    // Header
    type_object->complete().struct_type().header().detail().type_name("DataCollectionFloat");
    // TODO inheritance


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("DataCollectionFloat", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("DataCollectionFloat", true);
}

const TypeIdentifier* GetDataCollectionDoubleIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("DataCollectionDouble", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetDataCollectionDoubleObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("DataCollectionDouble", complete);
}

const TypeObject* GetDataCollectionDoubleObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("DataCollectionDouble", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteDataCollectionDoubleObject();
    }
    //else
    return GetMinimalDataCollectionDoubleObject();
}

const TypeObject* GetMinimalDataCollectionDoubleObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("DataCollectionDouble", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_value;
    mst_value.common().member_id(memberId++);
    mst_value.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_value.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_value.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_value.common().member_flags().IS_OPTIONAL(false);
    mst_value.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_value.common().member_flags().IS_KEY(false);
    mst_value.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_value.common().member_type_id(*TypeObjectFactory::get_instance()->get_sequence_identifier("double", 0, false));


    MD5 value_hash("value");
    for(int i = 0; i < 4; ++i)
    {
        mst_value.detail().name_hash()[i] = value_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_value);

    MinimalStructMember mst_quality;
    mst_quality.common().member_id(memberId++);
    mst_quality.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_quality.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_quality.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_quality.common().member_flags().IS_OPTIONAL(false);
    mst_quality.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_quality.common().member_flags().IS_KEY(false);
    mst_quality.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_quality.common().member_type_id(*TypeObjectFactory::get_instance()->get_sequence_identifier("char", 0, false));


    MD5 quality_hash("quality");
    for(int i = 0; i < 4; ++i)
    {
        mst_quality.detail().name_hash()[i] = quality_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_quality);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("DataCollectionDouble", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("DataCollectionDouble", false);
}

const TypeObject* GetCompleteDataCollectionDoubleObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("DataCollectionDouble", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_value;
    cst_value.common().member_id(memberId++);
    cst_value.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_value.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_value.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_value.common().member_flags().IS_OPTIONAL(false);
    cst_value.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_value.common().member_flags().IS_KEY(false);
    cst_value.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_value.common().member_type_id(*TypeObjectFactory::get_instance()->get_sequence_identifier("double", 0, true));


    cst_value.detail().name("value");

    type_object->complete().struct_type().member_seq().emplace_back(cst_value);

    CompleteStructMember cst_quality;
    cst_quality.common().member_id(memberId++);
    cst_quality.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_quality.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_quality.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_quality.common().member_flags().IS_OPTIONAL(false);
    cst_quality.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_quality.common().member_flags().IS_KEY(false);
    cst_quality.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_quality.common().member_type_id(*TypeObjectFactory::get_instance()->get_sequence_identifier("char", 0, true));


    cst_quality.detail().name("quality");

    type_object->complete().struct_type().member_seq().emplace_back(cst_quality);


    // Header
    type_object->complete().struct_type().header().detail().type_name("DataCollectionDouble");
    // TODO inheritance


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("DataCollectionDouble", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("DataCollectionDouble", true);
}

const TypeIdentifier* GetDataCharIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("DataChar", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetDataCharObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("DataChar", complete);
}

const TypeObject* GetDataCharObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("DataChar", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteDataCharObject();
    }
    //else
    return GetMinimalDataCharObject();
}

const TypeObject* GetMinimalDataCharObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("DataChar", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_value;
    mst_value.common().member_id(memberId++);
    mst_value.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_value.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_value.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_value.common().member_flags().IS_OPTIONAL(false);
    mst_value.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_value.common().member_flags().IS_KEY(false);
    mst_value.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_value.common().member_type_id(*TypeObjectFactory::get_instance()->get_sequence_identifier("char", 0, false));


    MD5 value_hash("value");
    for(int i = 0; i < 4; ++i)
    {
        mst_value.detail().name_hash()[i] = value_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_value);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("DataChar", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("DataChar", false);
}

const TypeObject* GetCompleteDataCharObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("DataChar", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_value;
    cst_value.common().member_id(memberId++);
    cst_value.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_value.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_value.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_value.common().member_flags().IS_OPTIONAL(false);
    cst_value.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_value.common().member_flags().IS_KEY(false);
    cst_value.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_value.common().member_type_id(*TypeObjectFactory::get_instance()->get_sequence_identifier("char", 0, true));


    cst_value.detail().name("value");

    type_object->complete().struct_type().member_seq().emplace_back(cst_value);


    // Header
    type_object->complete().struct_type().header().detail().type_name("DataChar");
    // TODO inheritance


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("DataChar", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("DataChar", true);
}

const TypeIdentifier* GetDataCollectionCharIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("DataCollectionChar", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetDataCollectionCharObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("DataCollectionChar", complete);
}

const TypeObject* GetDataCollectionCharObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("DataCollectionChar", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteDataCollectionCharObject();
    }
    //else
    return GetMinimalDataCollectionCharObject();
}

const TypeObject* GetMinimalDataCollectionCharObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("DataCollectionChar", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_value;
    mst_value.common().member_id(memberId++);
    mst_value.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_value.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_value.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_value.common().member_flags().IS_OPTIONAL(false);
    mst_value.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_value.common().member_flags().IS_KEY(false);
    mst_value.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_value.common().member_type_id(*TypeObjectFactory::get_instance()->get_sequence_identifier("DataChar", 0, false));


    MD5 value_hash("value");
    for(int i = 0; i < 4; ++i)
    {
        mst_value.detail().name_hash()[i] = value_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_value);

    MinimalStructMember mst_quality;
    mst_quality.common().member_id(memberId++);
    mst_quality.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_quality.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_quality.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_quality.common().member_flags().IS_OPTIONAL(false);
    mst_quality.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_quality.common().member_flags().IS_KEY(false);
    mst_quality.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_quality.common().member_type_id(*TypeObjectFactory::get_instance()->get_sequence_identifier("char", 0, false));


    MD5 quality_hash("quality");
    for(int i = 0; i < 4; ++i)
    {
        mst_quality.detail().name_hash()[i] = quality_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_quality);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("DataCollectionChar", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("DataCollectionChar", false);
}

const TypeObject* GetCompleteDataCollectionCharObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("DataCollectionChar", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_value;
    cst_value.common().member_id(memberId++);
    cst_value.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_value.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_value.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_value.common().member_flags().IS_OPTIONAL(false);
    cst_value.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_value.common().member_flags().IS_KEY(false);
    cst_value.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_value.common().member_type_id(*TypeObjectFactory::get_instance()->get_sequence_identifier("DataChar", 0, true));


    cst_value.detail().name("value");

    type_object->complete().struct_type().member_seq().emplace_back(cst_value);

    CompleteStructMember cst_quality;
    cst_quality.common().member_id(memberId++);
    cst_quality.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_quality.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_quality.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_quality.common().member_flags().IS_OPTIONAL(false);
    cst_quality.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_quality.common().member_flags().IS_KEY(false);
    cst_quality.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_quality.common().member_type_id(*TypeObjectFactory::get_instance()->get_sequence_identifier("char", 0, true));


    cst_quality.detail().name("quality");

    type_object->complete().struct_type().member_seq().emplace_back(cst_quality);


    // Header
    type_object->complete().struct_type().header().detail().type_name("DataCollectionChar");
    // TODO inheritance


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("DataCollectionChar", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("DataCollectionChar", true);
}

const TypeIdentifier* GetDDSDataIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("DDSData", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetDDSDataObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("DDSData", complete);
}

const TypeObject* GetDDSDataObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("DDSData", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteDDSDataObject();
    }
    //else
    return GetMinimalDDSDataObject();
}

const TypeObject* GetMinimalDDSDataObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("DDSData", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_time_source;
    mst_time_source.common().member_id(memberId++);
    mst_time_source.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_time_source.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_time_source.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_time_source.common().member_flags().IS_OPTIONAL(false);
    mst_time_source.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_time_source.common().member_flags().IS_KEY(false);
    mst_time_source.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    {
        std::string cppType = "int64_t";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        mst_time_source.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier(cppType, false));
    }

    MD5 time_source_hash("time_source");
    for(int i = 0; i < 4; ++i)
    {
        mst_time_source.detail().name_hash()[i] = time_source_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_time_source);

    MinimalStructMember mst_time_service;
    mst_time_service.common().member_id(memberId++);
    mst_time_service.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_time_service.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_time_service.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_time_service.common().member_flags().IS_OPTIONAL(false);
    mst_time_service.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_time_service.common().member_flags().IS_KEY(false);
    mst_time_service.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    {
        std::string cppType = "int64_t";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        mst_time_service.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier(cppType, false));
    }

    MD5 time_service_hash("time_service");
    for(int i = 0; i < 4; ++i)
    {
        mst_time_service.detail().name_hash()[i] = time_service_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_time_service);

    MinimalStructMember mst_data_int;
    mst_data_int.common().member_id(memberId++);
    mst_data_int.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_data_int.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_data_int.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_data_int.common().member_flags().IS_OPTIONAL(false);
    mst_data_int.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_data_int.common().member_flags().IS_KEY(false);
    mst_data_int.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_data_int.common().member_type_id(*GetDataCollectionIntIdentifier(false));
    MD5 data_int_hash("data_int");
    for(int i = 0; i < 4; ++i)
    {
        mst_data_int.detail().name_hash()[i] = data_int_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_data_int);

    MinimalStructMember mst_data_float;
    mst_data_float.common().member_id(memberId++);
    mst_data_float.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_data_float.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_data_float.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_data_float.common().member_flags().IS_OPTIONAL(false);
    mst_data_float.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_data_float.common().member_flags().IS_KEY(false);
    mst_data_float.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_data_float.common().member_type_id(*GetDataCollectionFloatIdentifier(false));
    MD5 data_float_hash("data_float");
    for(int i = 0; i < 4; ++i)
    {
        mst_data_float.detail().name_hash()[i] = data_float_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_data_float);

    MinimalStructMember mst_data_double;
    mst_data_double.common().member_id(memberId++);
    mst_data_double.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_data_double.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_data_double.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_data_double.common().member_flags().IS_OPTIONAL(false);
    mst_data_double.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_data_double.common().member_flags().IS_KEY(false);
    mst_data_double.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_data_double.common().member_type_id(*GetDataCollectionDoubleIdentifier(false));
    MD5 data_double_hash("data_double");
    for(int i = 0; i < 4; ++i)
    {
        mst_data_double.detail().name_hash()[i] = data_double_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_data_double);

    MinimalStructMember mst_data_char;
    mst_data_char.common().member_id(memberId++);
    mst_data_char.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_data_char.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_data_char.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_data_char.common().member_flags().IS_OPTIONAL(false);
    mst_data_char.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_data_char.common().member_flags().IS_KEY(false);
    mst_data_char.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_data_char.common().member_type_id(*GetDataCollectionCharIdentifier(false));
    MD5 data_char_hash("data_char");
    for(int i = 0; i < 4; ++i)
    {
        mst_data_char.detail().name_hash()[i] = data_char_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_data_char);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("DDSData", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("DDSData", false);
}

const TypeObject* GetCompleteDDSDataObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("DDSData", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_time_source;
    cst_time_source.common().member_id(memberId++);
    cst_time_source.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_time_source.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_time_source.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_time_source.common().member_flags().IS_OPTIONAL(false);
    cst_time_source.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_time_source.common().member_flags().IS_KEY(false);
    cst_time_source.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    {
        std::string cppType = "int64_t";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        cst_time_source.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier(cppType, false));
    }

    cst_time_source.detail().name("time_source");

    type_object->complete().struct_type().member_seq().emplace_back(cst_time_source);

    CompleteStructMember cst_time_service;
    cst_time_service.common().member_id(memberId++);
    cst_time_service.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_time_service.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_time_service.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_time_service.common().member_flags().IS_OPTIONAL(false);
    cst_time_service.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_time_service.common().member_flags().IS_KEY(false);
    cst_time_service.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    {
        std::string cppType = "int64_t";
        if (cppType == "long double")
        {
            cppType = "longdouble";
        }
        cst_time_service.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier(cppType, false));
    }

    cst_time_service.detail().name("time_service");

    type_object->complete().struct_type().member_seq().emplace_back(cst_time_service);

    CompleteStructMember cst_data_int;
    cst_data_int.common().member_id(memberId++);
    cst_data_int.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_data_int.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_data_int.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_data_int.common().member_flags().IS_OPTIONAL(false);
    cst_data_int.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_data_int.common().member_flags().IS_KEY(false);
    cst_data_int.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_data_int.common().member_type_id(*GetDataCollectionIntIdentifier(true));
    cst_data_int.detail().name("data_int");

    type_object->complete().struct_type().member_seq().emplace_back(cst_data_int);

    CompleteStructMember cst_data_float;
    cst_data_float.common().member_id(memberId++);
    cst_data_float.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_data_float.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_data_float.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_data_float.common().member_flags().IS_OPTIONAL(false);
    cst_data_float.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_data_float.common().member_flags().IS_KEY(false);
    cst_data_float.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_data_float.common().member_type_id(*GetDataCollectionFloatIdentifier(true));
    cst_data_float.detail().name("data_float");

    type_object->complete().struct_type().member_seq().emplace_back(cst_data_float);

    CompleteStructMember cst_data_double;
    cst_data_double.common().member_id(memberId++);
    cst_data_double.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_data_double.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_data_double.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_data_double.common().member_flags().IS_OPTIONAL(false);
    cst_data_double.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_data_double.common().member_flags().IS_KEY(false);
    cst_data_double.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_data_double.common().member_type_id(*GetDataCollectionDoubleIdentifier(true));
    cst_data_double.detail().name("data_double");

    type_object->complete().struct_type().member_seq().emplace_back(cst_data_double);

    CompleteStructMember cst_data_char;
    cst_data_char.common().member_id(memberId++);
    cst_data_char.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_data_char.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_data_char.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_data_char.common().member_flags().IS_OPTIONAL(false);
    cst_data_char.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_data_char.common().member_flags().IS_KEY(false);
    cst_data_char.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_data_char.common().member_type_id(*GetDataCollectionCharIdentifier(true));
    cst_data_char.detail().name("data_char");

    type_object->complete().struct_type().member_seq().emplace_back(cst_data_char);


    // Header
    type_object->complete().struct_type().header().detail().type_name("DDSData");
    // TODO inheritance


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("DDSData", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("DDSData", true);
}
